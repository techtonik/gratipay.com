from __future__ import print_function
from __future__ import unicode_literals

import datetime
import locale
from aspen import json
from gratipay import age

CARDINALS = ["zero", "one", "two", "three", "four", "five", "six", "seven",
             "eight", "nine"]
WEDNESDAY = 2
THURSDAY = 3
FRIDAY = 4
SATURDAY = 5

def commaize(number, places=0):
    return locale.format("%%.%df" % places, number, grouping=True)

[--------------------------------------------------------]

title = "Stats"
yesterday = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
db = website.db
escrow = db.one("SELECT sum(balance) FROM participants", default=0)
nach = db.one("SELECT count(*) FROM participants WHERE last_ach_result = '' AND is_suspicious IS NOT true")
if nach < 10:
    nach = CARDINALS[nach].title()
else:
    nach = commaize(nach)
payday = db.one( "SELECT ts_start, ts_end FROM paydays WHERE ts_start > %s"
               , (yesterday,)
                )
npeople = db.one("SELECT count(*) FROM participants WHERE claimed_time IS NOT NULL AND is_suspicious IS NOT true")
ncc = db.one("SELECT count(*) FROM participants WHERE last_bill_result = '' AND is_suspicious IS NOT true")
pcc = "%5.1f" % ((ncc * 100.0) / npeople) if npeople > 0 else 0.0
statements = db.all("SELECT username, statement FROM participants WHERE statement != '' AND is_suspicious IS NOT true ORDER BY random(), username LIMIT 16")
transfer_volume = db.one("SELECT transfer_volume FROM paydays ORDER BY ts_end DESC LIMIT 1", default=0)
tips_stats = db.one("""
    SELECT count(*), avg(amount), sum(amount)
      FROM current_tips
      JOIN participants p ON p.username = tipper
      JOIN participants p2 ON p2.username = tippee
     WHERE amount > 0
       AND is_funded
       AND p2.claimed_time IS NOT NULL
       AND p.is_suspicious IS NOT true
       AND p2.is_suspicious IS NOT true
""")
tip_n = getattr(tips_stats, 'count', None) or 0
average_tip = getattr(tips_stats, 'avg', None) or 0
total_backed_tips = getattr(tips_stats, 'sum', None) or 0

average_tippees = int(db.one("""\
    SELECT round(avg(ntippees))
      FROM ( SELECT count(tippee) as NTIPPEES
               FROM current_tips
               JOIN participants p ON p.username = tipper
               JOIN participants p2 on p2.username = tippee
              WHERE amount > 0
                AND is_funded
                AND p2.claimed_time IS NOT NULL
                AND p.is_suspicious IS NOT true
                AND p2.is_suspicious IS NOT true
           GROUP BY tipper
           ) AS bar
""", default=0))

word = "people"
if average_tippees == 1:
    word = "person"

if average_tippees < 10:
    number = CARDINALS[average_tippees]
else:
    number = str(average_tippees)

other_people = "%s other %s" % (number, word)

TIP_DISTRIBUTION = """
    SELECT amount, count(amount)
      FROM current_tips
      JOIN participants p ON p.username = tipper
      JOIN participants p2 on p2.username = tippee
     WHERE amount > 0
       AND is_funded
       AND p2.claimed_time IS NOT NULL
       AND p.is_suspicious IS NOT true
       AND p2.is_suspicious IS NOT true
  GROUP BY amount
  ORDER BY amount
"""

def get_tip_distribution():
    tip_distribution = db.all(TIP_DISTRIBUTION)
    r = {}
    for row in tip_distribution:
        percentage = row.count * 1.0 / tip_n
        r[str(row.amount)] = (row.count, percentage)
    return r


def part(s):
    s = s.splitlines()[0]
    if len(s) > 45:
        s = s[:42].rsplit(None, 1)[0] + " ..."
    return s


last_payday = db.one("select * from paydays order by ts_end desc limit 1", back_as="dict")
if last_payday:
    nactive = last_payday['nactive']
    ngivers = last_payday['ntippers']
    nreceivers = db.one("""
        SELECT count(distinct tippee)
          FROM transfers
         WHERE timestamp > %(ts_start)s
           AND timestamp < %(ts_end)s
           AND context IN ('tip', 'take')
    """, last_payday)
    noverlap = ngivers + nreceivers - nactive
else:
    nactive = ngivers = nreceivers = noverlap = 0


# Adapt wording to payday status.
# ===============================

now = datetime.datetime.utcnow()
last_thursday = "last Thursday"
this_thursday = "this Thursday"
punc = "."
future_processing_text = "is ready for"
if now.weekday() == WEDNESDAY:
    this_thursday = "tomorrow"
if now.weekday() == THURSDAY:
    if payday is None or payday.ts_end is None:
        # Payday hasn't started yet.
        this_thursday = "today"
    elif payday.ts_end.year == 1970:
        # Payday is going on right now.
        future_processing_text = "is changing hands"
        this_thursday = "right now!"
        punc = ""
    else:
        # Payday is finished for today.
        last_thursday = "today"
        this_thursday = "next Thursday"
elif now.weekday() == FRIDAY:
    last_thursday = "yesterday"
    this_thursday = "next Thursday"
elif now.weekday() == SATURDAY:
    last_thursday = "this past Thursday"
    this_thursday = "this coming Thursday"

def out():
    names = ['ncc', 'pcc', 'statements', 'transfer_volume', 'last_thursday',
             'this_thursday', 'punc', 'other_people', 'average_tip',
             'average_tippees', 'total_backed_tips', 'tip_n', 'nach', 'escrow',
             'ngivers', 'nreceivers', 'noverlap', 'nactive']
    d = globals()
    r = {name: d[name] for name in names}
    r['tip_distribution'] = get_tip_distribution()
    return r

[----------------------------------------------------------] application/json via json_dump
out()
[----------------------------------------------------------] text/html

{% extends "templates/about.html" %}

{% block head %}
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<style>
    .dollar-sign {
        padding: 0 2pt 0 24pt;
        text-align: right;
    }
    .amount {
        padding: 0 6pt 0 0;
        text-align: right;
    }
    .amount-change {
        padding: 6pt 0 6pt 24pt;
        text-align: left;
    }
    .count {
        text-align: left;
        white-space: nowrap;
    }
    .count span.number {
        font-size: 8pt;
    }
        background: #B2A196;
    .count span.bar {
        display: inline-block;
        margin-right: 3pt;
        height: 9pt;
        }

    .distribution {
      font: 10px sans-serif;
    }

    .bar rect {
      fill: #396;
      shape-rendering: crispEdges;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
</style>
{% endblock %}

{% block scripts %}
<script src="{{ website.asset('d3.min.js') }}"></script>
<script>
d3.json("/about/tip-distribution.json", function(tips){

    var min_tip = 0.01;
    var max_tip = 1000;
    var number_of_bars = 20;

    var margin = {top: 10, right: 30, bottom: 50, left: 20},
        width = 630 - margin.left - margin.right,
        height = 250 - margin.top - margin.bottom,
        bar_width = width/number_of_bars;

    var x_scale = d3.scale.log()
        .domain([min_tip, max_tip])
        .range([0, width]);

    var ticks = d3.range(number_of_bars+1)
        .map(function(i){ return x_scale.invert(i*bar_width) });

    function initBarPos(i){
      return {x: i*bar_width, y: 0}
    }
    var tips_by_value = d3.range(number_of_bars).map(initBarPos);
    var tips_by_number = d3.range(number_of_bars).map(initBarPos);

    tips.map(function(tip){
      var i = Math.floor(x_scale(tip)/width*number_of_bars);
      tips_by_value[i].y += tip;
      tips_by_number[i].y += 1;
    });

    var formatCount = d3.format(",.0f");
    var formatTick = function(x){ return d3.round(x, x < 10 ? 2 : 0) };

    var create_histogram = function(element, data, ylabel){

        var y = d3.scale.linear()
            .domain([0, d3.max(data, function(d) { return d.y; })])
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x_scale)
            .tickValues(ticks)
            .tickFormat(formatTick)
            .orient("bottom");

        var svg = d3.select(element).append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var bar = svg.selectAll(".bar")
            .data(data)
          .enter().append("g")
            .attr("class", "bar")
            .attr("transform", function(d) { return "translate(" + d.x + "," + y(d.y) + ")"; });

        bar.append("rect")
            .attr("x", 1)
            .attr("width", bar_width - 1)
            .attr("height", function(d) { return height - y(d.y); });

        bar.append("text")
            .attr("dy", ".75em")
            .attr("y", -10)
            .attr("x", bar_width / 2 - 1)
            .attr("text-anchor", "middle")
            .text(function(d) { return formatCount(d.y); });

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        svg.append("text")
            .attr("class", "x label")
            .attr("text-anchor", "end")
            .attr("x", width)
            .attr("y", height + 30)
            .text("tip amount in US dollars ($)");

        svg.append("text")
            .attr("class", "y label")
            .attr("text-anchor", "end")
            .attr("y", - 15)
            .attr("dy", ".75em")
            .attr("transform", "rotate(-90)")
            .text(ylabel);

    }

    create_histogram("#distribution-by-number", tips_by_number, "number of tips");
    create_histogram("#distribution-by-value", tips_by_value,
      "total value of tips in US dollars ($)");

  });

</script>

{{ super() }}
{% endblock %}

{% block page %}


<div class="col1">

    <h1>Quick Facts</h1>

    <p>Gratipay is <b>{{ age() }}</b> old and has <b>{{ nactive }} active
    users</b>.</p>

    <p>
        {{ ngivers }} participants gave money in the past week.<br />
        {{ nreceivers }} received money.<br />
        {{ noverlap }} did both.
    </p>

    <p><b>{{ commaize(npeople) }} people</b> have joined Gratipay. Of those,
    {{ pcc }}% ({{ commaize(ncc) }}) have a working credit card on
    file.{% if not user.ANON and user.participant.last_bill_result == '' %}
    You're one of them.{% elif not user.ANON %} You're not one of them.</p>

    <p><b><a href="/credit-card.html" class="highlight">Click here to set up a
        credit card</a></b>.{% endif %}</p>

    <p><b>${{ commaize(escrow, 2) }}</b> is escrowed within Gratipay.
    {{ nach }} people have connected a bank account</a> for withdrawals.
    {% if not user.ANON and user.participant.last_ach_result == '' %}You're one of them.
    {% elif not user.ANON %}You're not one of them.</p>

    <p><b><a href="/bank-account.html" class="highlight">Click here to connect
        a bank account</a></b>.{% endif %}</p>

    <p><b>${{ commaize(transfer_volume, 2) }}</b> changed hands
        <b>{{ last_thursday }}</b>.</p>

    <p><b>${{ commaize(total_backed_tips, 2) }}</b>
        {{ future_processing_text }} <b>{{ this_thursday }}</b>{{ punc }}
    </p>
    <p>On average, people who tip, tip ${{ "%.2f" % average_tip }} each to
    {{ other_people }}. </p>
    </br>
    </br>
    <p>Here's how tip amounts are distributed by number of tips:</p>

    <div id="distribution-by-number", class="distribution"></div>

    <p>Here's how tip amounts are distributed by total value of the tips:</p>

    <div id="distribution-by-value", class="distribution"></div>
</div>
<div class="col2">

    <h1>For Example</h1>

    <p>How are Gratipay participants <b>making the world better</b>?</p>

    <p>
    {% for statement in statements %}
    <b><a href="/{{ statement.username|e }}/">{{ statement.username|e }}</a></b>
    is <span title="{{ statement.statement|e }}">{{ part(statement.statement)|e }}</span><br />
    {% endfor %}
    </p>
</div>
{% endblock %}
